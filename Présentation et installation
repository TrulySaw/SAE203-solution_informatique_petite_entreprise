DAVY Noah
1e A TDA TP1

       SAE203 : Présentation et installation de la solution informatique.


I.	Présentation : 

Nous cherchons à développer un petit réseau d’entreprise comportant plusieurs machines : 
	-  Un serveur central, le coeur du réseau et directement connecté à internet,
	-  Deux serveurs DHCP étant chacun sur un réseau différent (comportant une interface
	physique et virtuelle) mais reliés au serveur central,
	-  Pour chaque serveur DHCP, deux clients seront créés et y seront liés via un VLAN.

Grâce aux différentes configurations et modifications apportées, l’administrateur système/réseau sera en capacité de gérer de manière efficace les serveurs DHCP ainsi que les clients qui y sont reliés directement via un serveur central, pour une meilleure gestion et un contrôle optimal.

1)	Architecture principale :
	Serveur central :
		-  Une paire de Clés SSH (rsa) créée et transférée dans le fichier authorized_keys de
		l’utilisateur devant exécuter les commandes sur les serveurs DHCP,
		-  Un fichier de configuration YAML (appelé config.yaml) pour la configuration
 		globale,
		-  Trois modules dhcp.py (configuration de dnsmasq), config.py (charger le fichier
		de configuration, validation.py (valider adresses MAC et IP),
		-  Quatre commandes développées à l’aide de programmes python : add-dhcp-client,
                        remove-dhcp-client, check-dhcp, check-dhcp.
	Serveurs DHCP :
		-  Script de filtrage des connexions ssh (en bash ou python) (dans
		/usr/local/bin/restriction.sh de l’utilisateur exécutant les commandes sur les serveurs 
		DHCP),
		-  réservations d’IP configurées (fichier de config dans /etc/dnsmasq.d/hosts.conf),
		-  dnsmasq configuré,
		-  restrictions de l’utilisation de sudo dans /etc/sudoers.d/sudo_dhcp.

2)	Principales fonctionnalités : 
		-  Gestion des correspondances IP/MAC existantes,
		-  Ajout d’associations IP/MAC dans la configuration dnsmasq,
		-  Listage des configurations existantes,
		-  Suppression/Mise à jour des associations existantes,
		-  Validation des formats d’adresses IP et MAC.

Ces fonctionnalités sont disponibles grâce à certaines commandes au préalable programées : 
.  add-dhcp-client → ajouter un client DHCP à partir des paramètres de la machine,
.  remove-dhcp-client → supprimer un client DHCP,
.  check-dhcp → vérifier l’intégrité de la configuration DHCP et peut la corriger,
.  list-dhcp → afficher de manière formattée la configuration DHCP de tous les réseaux/un réseau en particulier.

3)	Mesures de sécurité :
		-  Vérification des associations IP/MAC (pas de doublons),
		-  Possibilité de redémarrer le service dnsmasq après modification,
		-  Commandes effectuées via une connexion ssh restreinte et sécurisée.


II.	Guide d’installation :

1)	Prérequis techniques :
		-  Tous les paquets doivent être à jour (cela est mieux) : apt-get update → apt
		update et apt-get upgrade → apt upgrade.
		-  Python 3.8 ou supérieur,	
		-  OS linux (ubuntu, debian…),
		-  Paquets installés : fabric, ipaddress, pyyaml,
		-  Accès SSH pour les connexions aux serveurs distants.
		-  Un compte utilisateur d’administration sur le serveur central ainsi que sur les
		serveurs DHCP,
		-  Permissions sudo optimales pour l’utilisateur exécutant les commandes.
	
2)	Configuration du serveur central :
		-  Génération d’une paire de clés SSH (type rsa par défaut),
		-  Compte utilisateur d’administration avec droits sudo (sae203 ou autre),
		-  Python3 installé (version 3.8 suffisante),
		-  Certains modules python : fabric – pyyaml – yaml,
		-  3 interfaces réseau :
			.  une physique directement connectée à internet,
			.  deux virtuelles, une pour chaque réseau.

3)	Configuration des serveurs DHCP :
		-  Compte utilisateur d’administration avec droits sudo (sae203 ou autre),
		-  Compte utilisateur spécifique pour exécuter les commandes,
		-  Clé rsa publique transférée dans le fichier authorized_keys du compte utilisateur
		spécifique sur les deux serveurs DHCP → ssh activé et donc configuré,
		-  dnsmasq configuré (fichier dans /etc/dnsmasq.d/),
		-  Python3 version 3.8 ou plus.

Configuration générale : 

1)	Serveur central :
		-  pip3 install fabric yaml pyyaml - pour avoir les modules
		nécessaires,

		-  Création du répertoire contenant tous les scripts :
		mkdir ~/gestion_dhcp (rajouter l’option -p pour créer le répertoire /home si 
		absent),
		
		-  Création du répertoire contenant la paire de clés ssh devant être générée :
 		mkdir ~/.ssh,

		-  Créer la paire de clés et transférer la clé publique sur les serveurs DHCP:
		. ssh-keygen -f ~/.ssh/nopass_key
		. ssh-copy-id -i ~/.ssh/nopass_key.pub sae203@10.20.1.5
                . ssh-copy-id -i ~/.ssh/nopass_key.pub sae203@10.20.2.5
  		(option -i afin de préciser la clé).

2)	Serveurs DHCP : 
		-  sudo apt install python3 – installer python3,

		-  sudo apt install dnsmasq – installer dnsmasq pour pouvoir le configurer,

		-  sudo touch /etc/dnsmasq.d/hosts.conf – création du fichier de 
 		réservation d’adresses DHCP,

 		-  sudo chmod 644 /etc/dnsmasq.d/hosts.conf – attribuer les bonnes 
 		persmissions.

3)	Utilisateur spécifique (à faire sur les deux serveurs DHCP) :
		-  sudo groupadd superv – créer le groupe de l’utilisateur spécial,

		-  sudo useradd -m -s /bin/bash -G superv dhcp – créer et ajouter 
		l’utilisateur spécial (dhcp ici) à son groupe,

		-  sudo cp dhcp_key.pub /home/dhcp/.ssh/authorized_keys – 
		copier la clé publique dans le fichier authorized_keys de l’utilisateur dhcp,

		-  En tant qu’utilisateur dhcp, créer le fichier restriction.sh afin de filtrer les 
		connexions ssh de cet utilisateur : 
			. le script devra faire en sorte que l'utilisateur dhcp ne puisse exécuter
			seulement les commandes nécessaires à la gestion des serveurs DHCP : 
				. il doit pouvoir redémarrer dnsmasq,
				. doit pouvoir voir l'état du service (actif ou non),
				. afficher son contenu (pour l'analyser par exemple),
				. doit pouvoir le modifier (ajouter/supprimer une association MAC/IP).
		
		-  Donner les bonnes permissions pour ce fichier (en tant qu’utilisateur d’administration) : 
			. nano /usr/local/bin/restriction.sh,
			. sudo chmod +x /usr/local/bin/restriction.sh,
			. sudo chown root:root /usr/local/bin/restriction.sh,

		-  Depuis l’utilisateur d’administration, créer un fichier sudo_dhcp dans 
		/etc/sudoers.d/ et ajouter les lignes suivantes et donner les bonnes permissions 
		(commandes que l’utilisateur dhcp peut exécuter en tant que root sans mot de passe) : 
		dhcp ALL=(root) NOPASSWD: /usr/bin/systemctl restart dnsmasq
		dhcp ALL=(root) NOPASSWD: /usr/bin/systemctl status dnsmasq	
		#pour lire le contenu de hosts.conf (MAC - IP - nom_machine)
		dhcp ALL=(root) NOPASSWD: /bin/cat /etc/dnsmasq.d/hosts.conf
		#pour supprimer une association dans le fichier hosts.conf
		dhcp ALL=(root) NOPASSWD: /usr/bin/sed -i "/*/d" /etc/dnsmasq.d/hosts.conf
		#pour ajouter une association dans le fichier hosts.conf
		dhcp ALL=(root) NOPASSWD: /usr/bin/tee -a /etc/dnsmasq.d/hosts.conf
 
		sudo chmod 440 /etc/sudoers.d/sudo_dhcp

		-  Modifier le fichier ~/.ssh/authorized_keys de l’utilisateur dhcp sur les 2 serveurs 
		DHCP :
			. nano ~/.ssh/authorized_keys,
			. modifier le contenu du fichier pour avoir ceci : 
			command="/usr/local/bin/restriction.sh",no-port-forwarding,no-X11-forwarding,no-agent-forwarding ssh-rsa AAAA...

III.	Test :

À faire avant tout test : 
	1)	Vérifier que tous les fichiers (commandes python ainsi que les modules python et le fichier de configuration 
		config.yaml) soient présents dans le répertoire ~/gestion_dhcp.

	2)	Vérifier chaque fichier, exemple : 
			-  Le fichier config.yaml doit contenir le chemin menant au fichier hosts.conf dans lequel se trouvent tous les
			hôtes d'un réseau,
			-  Doit contenir l'utilisateur qui sera utilisé pour exécuter les commandes,
			-  Doit contenir tous les réseaux existants et reliés au serveur central...

	3)	Vérifier les permissions de chaque fichier, exemple : 
		Le fichier restriction.sh (le script restreignant les connexions ssh de l'utilisateur dhcp aux 
		commandes qu'il peut exécuter) doit avoir pour propriétaire root et doit être exécutable.

	4)	Vérifier que la clé publique soit bien dans le fichier authorized_keys de l'utilisateur dhcp et que 
		le script restriction.sh lui soit bien appliqué : command="/usr/local/bin/restriction.sh"...

Pour ce qui est des tests (tout depuis le serveur central, en tant que sae203) :
A)  Le script restriction.sh :
	1)	Tester une commande autorisée dans le script restriction.sh vers un serveur DHCP :
		ssh -i /home/sae203/.ssh/nopass_key dhcp@10.20.X.5 "sudo systemctl status dnsmasq" -> doit afficher ceci : 
		
			sae203@srv-central:~$ ssh -i /home/sae203/.ssh/nopass_key dhcp@10.20.X.5 "sudo systemctl status dnsmasq"
			Commande autorisee, execution :
			* dnsmasq.service - dnsmasq - A lightweight DHCP and caching DNS server
			     Loaded: loaded (/lib/systemd/system/dnsmasq.service; enabled; vendor preset: enabled)
			     Active: active (running) since Sat 2025-06-14 20:24:44 CEST; 1h 42min ago
			     ...

	2)	Tester une commande non-autorisée : 
		ssh -i /home/sae203/.ssh/nopass_key dhcp@10.20.X.5 "ls -la" -> doit afficher ceci : 

			sae203@srv-central:~$ ssh -i /home/sae203/.ssh/nopass_key dhcp@10.20.X.5 "ls -al"
			Non non non, commande interdite : ls -la
			Voici les commandes autorisees :
			- sudo systemctl restart dnsmasq
			- sudo systemctl status dnsmasq
			- sudo cat /etc/dnsmasq.d/hosts.conf
		
	3)	Tester sans commande : 
		ssh -i /home/sae203/.ssh/nopass_key dhcp@10.20.X.5 -> doit afficher ceci : 

			sae203@srv-central:~$ ssh -i /home/sae203/.ssh/nopass_key dhcp@10.20.X.5         
			Pas de commande. Connexion refusee !
			Connection to 10.20.1.5 closed.

B)  Les modules dhcp.py, config.py et validation.py (à savoir, vous pouvez les modifier, pour faire des tests par exemple) : 
Dans le répertoire gestion_dhcp (c'est ici que se trouvent tous les fichers, donc ici qu'il faut tester) :
	1)	Tester dhcp.py -> python3 dhcp.py -> doit afficher ceci : 

			sae203@srv-central:~/gestion_dhcp$ python3 dhcp.py 
			Fichier config bien charge

	2)	Tester config.py -> doit afficher ceci : 

			sae203@srv-central:~/gestion_dhcp$ python3 config.py 
			{'10.20.1.5': '10.20.1.0/24'} -> serveur DHCP du client ainsi que son réseau
			{'10.20.2.5': '10.20.2.0/24'} -> même chose
			None -> client n'étant dans aucun des réseaux des serveurs DHCP présents

	3)	Tester validation.py -> ne doit rien afficher (cela montre que le code s'exécute normalement) :
	
			sae203@srv-central:~/gestion_dhcp$ python3 validation.py
			sae203@srv-central:~/gestion_dhcp$
			Vous avez la possibilité de modifier le main de ce module afin d'afficher les résultats (des print...)
	
C)  Les commandes add-dhcp-client.py, remove-dhcp-client.py (delete-dhcp-client.py), check-dhcp.py, list-dhcp.py :
	1)	Tester add-dhcp-client.py :
		python3 add-dhcp-client.py MAC IP -> on devrait avoir une nouvelle ligne dans hosts.conf :

			sae203@srv-central:~/gestion_dhcp$ python3 add-dhcp-client.py MAC IP
			dhcp-host=52:54:01:02:03:11,10.20.1.99
			dhcp-host=52:54:01:02:03:12,10.20.1.100
			dhcp-host=MAC,IP -> nouvelle ligne

	2)	Tester remove-dhcp-client.py :
		python3 delete-dhcp-client.py MAC -> plusieurs cas de figure :

			-  Si l'adresse MAC n'existe pas :
			sae203@srv-central:~/gestion_dhcp$ python3 delete-dhcp-client.py MAC_INEXISTANTE
			MAC address not found
		
			-  Si l'on rentre une adresse MAC qui existe :
			sae203@srv-central:~/gestion_dhcp$ python3 delete-dhcp-client.py 52:54:01:02:03:12 -> la ligne 
			comportant cette association doit être supprimée, on doit avoir ceci dans hosts.conf :
			dhcp-host=52:54:01:02:03:11,10.20.1.99

			-  Si l'adresse MAC n'est pas correcte :
			sae203@srv-central:~/gestion_dhcp$ python3 delete-dhcp-client.py 42:1b:gg:hh:a5:0c -> doit afficher cela :
			error : bad MAC address

	3)	Tester check-dhcp.py :
		python3 check-dhcp.py [IP ou RESEAU] -> supposons que l'on ait config.yaml : 
			dhcp_hosts_cfg: /etc/dnsmasq.d/hosts.conf
			user: sae203
			dhcp-servers:
			  10.20.50.3: 10.20.50.0/24
			  10.20.60.8: 10.20.60.0/24

		et /etc/dnsmasq.d/hosts.conf : 
			dhcp-host=11:22:33:44:55:66,10.20.50.100
			dhcp-host=12:34:56:78:9a:bc,10.20.50.110
			dhcp-host=ee:dd:cc:bb:aa:99,10.20.50.113
			dhcp-host=99:88:77:66:55:44,10.20.50.110
			dhcp-host=11:22:33:44:55:66,10.20.50.125

		On doit obtenir ceci : 
			sae203@srv-central:/gestion_dhcp$ python3 dhcp-check.py 10.20.1.50/24
			duplicate MAC addresses:
			dhcp-host=11:22:33:44:55:66,10.20.50.100
			dhcp-host=11:22:33:44:55:66,10.20.50.125
			duplicate IP adresses:
			dhcp-host=12:34:56:78:9a:bc,10.20.50.110
			dhcp-host=99:88:77:66:55:44,10.20.50.110

	4)	Tester list-dhcp.py :
		python3 list-dhcp.py [serveur] -> plusieurs possibilités (exemple pour le serveur DHCP 1), car préciser le serveur est optionnel :

			-  python3 list-dhcp.py -> doit lister les hôtes de tous les serveurs DHCP existants :
				sae203@srv-central:~/gestion_dhcp$ python3 list-dhcp.py
				10.20.1.5 :
				52:54:01:02:03:11		10.20.1.99
				52:54:01:02:03:12		10.20.1.100
				10.20.2.5 :
				52:54:01:02:03:21		10.20.2.115
				52:54:01:02:03:22		10.20.2.116

			-  python3 list-dhcp.py [serveur] -> doit afficher le serveur ainsi que ses hôtes :
				sae203@srv-central:~/gestion_dhcp$ python3 list-dhcp.py 10.20.X.5
				10.20.X.5 :
				52:54:01:02:03:XX		10.20.X.X
				52:54:01:02:03:XX		10.20.X.X
		
		
		
		

































