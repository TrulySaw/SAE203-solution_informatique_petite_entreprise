SAÉ2.03 - Configuration et Usage des Outils de Supervision DHCP

Les outils de supervision DHCP permettent de gérer de manière centralisée l'attribution d'adresses IP fixes aux clients des différents réseaux via des serveurs DHCP distribués.

Fonctionnalités principales : 
      - Ajout et suppression de clients DHCP,
      - Vérification d'intégrité des configurations,
      - Listage formaté des associations MAC/IP,
      - Gestion centralisée via SSH avec authentification par clé,
      - Exécution sécurisée des commandes administrateur,
      - Configuration du système.

1. Fichier de configuration principal : 
  Le fichier de configuration principal se nomme config.yaml et doit être placé, comme tous les autres fichiers dont nous parlerons plus tard, dans le répertoire ~/gestion_dhcp/
  
  Exemple de configuration :
  
        dhcp_hosts_cfg: /etc/dnsmasq.d/hosts.conf
        user: sae203
        dhcp-servers:
          10.20.1.5: 10.20.1.0/24
          10.20.2.5: 10.20.2.0/24
  
  Paramètres configurables : 
        - dhcp_hosts_cfg : chemin du fichier de configuration dnsmasq sur les serveurs distants,
        - user : utilisateur utilisé pour la connexion ssh - ici, l'utilisateur spécial est "dhcp",
        - dhcp-servers : compte les serveurs existants - possibilité d'en rajouter/supprimer.

2. Configuration SSH : 
  -> Authentification par clé publique
  La génération de la paire de clés est obligatoire avec ou sans passphrase :
  
        ssh-keygen -t rsa -C "nopass_key" -> lorsque qu'il vous demande la passphrase, simplement taper sur ENTREE si pas de passphrase.
  
  Copie de la clé publique sur les serveurs distants :
  
        ssh-copy-id sae203@10.20.1.5
        ssh-copy-id sae203@10.20.2.5

  Copie de la clé publique dans le ficher ~/.ssh/authorized_keys (se fait automatiquement avec copy-id) de l'utilisateur spécial dhcp :

        ssh-copy-id dhcp@10.20.1.5
        ssh-copy-id dhcp@10.20.2.5

  ATTENTION : si d'autres paires de clés ont été généré auparavant, préciser la clé à transférer comme suit : ssh-copy-id -i ~/.ssh/CLE_A_TRANSFERER ...
  
  Configuration des commandes autorisées :
  Sur chaque serveur DHCP, modifier le fichier ~/.ssh/authorized_keys pour restreindre les commandes SSH autorisées pour l'utilisateur "dhcp" :
  
        command="/usr/local/bin/dhcp-commands.sh",no-port-forwarding,no-X11-forwarding,no-agent-forwarding ssh-rsa AAAA...

3. Configuration sudo : 
  Créer le groupe superv :

        sudo groupadd superv
  
  Ajouter l'utilisateur "dhcp" au groupe :
  
        sudo usermod -a -G superv dhcp
  
  Configuration sudoers : 
  Créer le fichier /etc/sudoers.d/sudo_dhcp et taper dedans :
  
        dhcp ALL=(root) NOPASSWD: /usr/bin/systemctl restart dnsmasq
        dhcp ALL=(root) NOPASSWD: /usr/bin/systemctl status dnsmasq
        #pour lire le contenu de hosts.conf (MAC - IP - nom_machine)
        dhcp ALL=(root) NOPASSWD: /bin/cat /etc/dnsmasq.d/hosts.conf
        #pour supprimer une association dans le fichier hosts.conf
        dhcp ALL=(root) NOPASSWD: /usr/bin/sed -i "/*/d" etc/dnsmasq.d/hosts.conf
        #pour ajouter une association dans le fichier hosts.conf
        dhcp ALL=(root) NOPASSWD: /usr/bin/tee -a /etc/dnsmasq.d/hosts.conf

4. Installation des dépendances : 
   Installation de Python et pip :
      
      sudo apt update
      sudo apt install python3 python3-pip
      
   Installation de Fabric :
      
      pip3 install fabric
      
   Installation de PyYAML pour la configuration :
      
      pip3 install pyyaml

5. Structure du projet : 

Le projet se compose des éléments suivants :
      - config.yaml : fichier de configuration principal,
      - add-dhcp-client.py : commande d'ajout d'une association,
      - remove-dhcp-client.py : commande de suppression d'une association,
      - check-dhcp.py : commande de vérification et de mise à jour d'une association,
      - list-dhcp.py : commande de listage de toutes les associations ou celle d'un serveur en particulier,
      - config.py : module comportant les fonctions permettant de charger le fichier de configuration et de rechercher un serveur,
      - dhcp.py : module comportant les fonctions qui seront utilisées par les commandes,
      - validation.py : module comportant les fonctions de vérification des paramètres.

Module dhcp.py : 
      - ip_other_mac_exists(cnx, ip, mac, cfg) : vérifie si une IP est déjà utilisée par une autre adresse MAC,
      - mac_exists(cnx, mac, cfg) : vérifie si une adresse MAC est déjà présente dans la configuration,
      - dhcp_add(ip, mac, server, cfg) : ajoute une correspondance MAC/IP,
      - dhcp_remove(mac, server, cfg) : supprime une configuration DHCP associée à une adresse MAC,
      - dhcp_list(server, cfg) : retourne une liste des associations du serveur spécifié.

Module config.py :
      load_config(filename, create) : charge la configuration grâce au fichier config.yaml,
      get_dhcp_server(ip, cfg) : recherche le serveur dhcp correspondant à l'adresse IP.

Module validation.py :
      - ip_valide(ip) : valide le format d'une adresse IP.
      - mac_valide(mac) : valide le format d'une adresse MAC,

6. Manuel des commandes : 

a. add-dhcp-client.py : 

      Syntaxe : 
            add-dhcp-client.py MAC IP
      Description : 
            - vérifie la validé des paramètres (IP, MAC),
            - identifie le serveur DHCP concerné (en fonction de l'adresse IP), si aucun serveur identifié -> erreur "Unable to identify DHCP server",
            - vérifie que l'IP n'est pas déjà utilisée, si non -> nouvelle directive, sinon erreur, 
            - vérifie que l'adresse MAC n'est pas déjà utilisée, si déjà utilisée -> mise à jour de la directive avec nouvelle IP, si non -> erreur "IP déjà attribuéeé",
            - met à jour la configuration et redémarre dnsmasq.

Paramètres : 
      MAC : adresse MAC au format xx:xx:xx:xx:xx:xx,
      IP : adresse IP pivée.

Fichiers utilisés :
      config.yaml : fichier de configuration des serveurs dhcp distants,
      /etc/dnsmasq.d/hosts.conf : fichier de configuration dnsmasq sur les serveurs distants.

Exemples :
      - ajout d'une nouvelle association :  
      $add-dhcp-client.py XX:XX:XX:XX:XX:XX 10.20.1.53 -> nouvelle ligne dans hosts.conf.
      
      - modification d'une association existante :
      $add-dhcp-client.py XX:XX:XX:XX:XX:XX 10.20.1.100 -> ligne concernée modifiée dans le fichier hosts.conf.
      
      - IP déjà utilisée : 
      $add-dhcp-client.py 42:1b:22:55:a5:0c 10.20.1.100
      error: IP address already in use.

      - adresse IP incorrecte : 
      $add-dhcp-client.py 42:1b:22:55:a5:0c 10.20123.1.100
      error: bad IP address.

      - adresse MAC incorrecte : 
      $ add-dhcp-client.py 42:1b:gg:hh:a5:0c 10.20.1.100
      error: bad MAC address.

b. remove-dhcp-client.py : 
      Syntaxe : 
            remove-dhcp-client.py MAC  
      Description : 
            - vérifie la validité de ses paramètres,
            - interroge les serveurs dhcp via le fichier configuration.yaml pour savoir lequel possède une configuration pour cette MAC,
            - si l'adresse MAC n'est trouvée nulle part -> message d'erreur "MAC address not found",
            - si l'adresse MAC est trouvée, la directive dhcp-host correspondante est supprimée.
            - met à jour la configuration et redémarre dnsmasq.

Paramètres :
      MAC : adresse MAC à supprimer
      
Fichiers utilisés : 
      config.yaml : fichier de configuration des serveurs dhcp distants
      /etc/dnsmasq.d/hosts.conf : fichier de configuration dnsmasq sur les serveurs distants.

Exemples :
      - suppression réussie :    
      $delete-client.py 42:46:dd:51:10:c1
      Configuration mise à jour
      
      - MAC non trouvée :     
      $delete-dhcp-client.py XX:XX:XX:XX:XX:XX
      MAC address not found

      - mauvaise adresse MAC : 
      $delete-dhcp-client.py XX:XX:XX:XX:XX:XX
      error: bad MAC address.

c. check-dhcp.py : 
      Syntaxe :
            check-dhcp.py [IP-OU-RESEAU]
      
      Description : 
            - utilise un paramètre optionnel : [IP-OU-RESEAU],
            Si ce paramètre est utilisé : 
                  - cherche dans config.yaml le serveur dhcp en question,
                  - si le serveur n'est pas trouvé -> erreur "cannot identify DHCP server" et interruption de la commande.
                  - si le serveur est trouvé :
                        . si une adresse MAC est présente dans 2 directives ->  on affiche les deux,
                        . si une adresse IP est présente dans 2 directives -> on affiche les deux.
            Si ce paramètre n'est pas utilisé -> vérification de tous les serveurs dhcp présents dans config.yaml.  
      
Paramètres : 
      IP-OU-RESEAU -> paramètre optionnel spécifiant l'IP du serveur DHCP ou son réseau (exemple : 10.20.1.5 ou 10.20.1.0/24 pour le serveur dhcp 1).

Fichiers utilisés :
      config.yml : fichier de configuration des serveurs dhcp distants,
      /etc/dnsmasq.d/hosts.conf : fichier de configuration dnsmasq sur les serveurs distants.

Exemples : 
      - vérification d'un serveur spécifique :
      $check-dhcp.py 10.20.X.0/24
      duplicate MAC addresses:
      dhcp-host=XX:XX:XX:XX:XX:,10.20.X.X
      dhcp-host=XX:XX:XX:XX:XX:XX,10.20.5X.X
      duplicate IP addresses:
      dhcp-host=XX:XX:XX:XX:XX:XX,10.20.1.110
      dhcp-host=XX:XX:XX:XX:XX:XX,10.20.1.110

      - vérification de tous les serveurs :
      $check-dhcp.py -> affiche les duplicats s'il y en a, pour tous les serveurs dhcp présents dans config.yaml.
                                                                                                                                                                                                                                                                                          
d. list-dhcp.py :
      Syntaxe :
            list-dhcp.py [serveur]
      
      Description :
            - vérifie la validité des paramètres,
            - si le paramètre [serveur] n'est pas utilisé -> la commande liste toutes les associations MAC/IP de tous les serveurs dhcp présents dans config.yaml (2 colonnes : MAC IP).
            - si le paramètre [serveur] est utilisé -> la commande liste toutes les associations MAC/IP pour ce serveur donné (2 colonnes : MAC IP).

Paramètres : 
      [serveur] : serveur est un paramètre optionnel -> soit l'IP soit le nom du serveur DHCP.

Fichiers utilisés :
      config.yaml : fichier de configuration des serveurs dhcp distants.
      /etc/dnsmasq.d/hosts.conf : fichier de configuration dnsmasq sur les serveurs distants.

Exemples :
      - paramètre utilisé -> listage d'un serveur spécifique :
      $list-dhcp.py 10.20.1.5
      10.20.1.5 :
	52:54:01:02:03:11		10.20.1.99
      52:54:01:02:03:12		10.20.1.100

      - paramètre non utilisé -> listage de tous les serveurs :
      list-dhcp.py
	10.20.1.5 :
      52:54:01:02:03:11		10.20.1.99
	52:54:01:02:03:12		10.20.1.100
	10.20.2.5 :
	52:54:01:02:03:21		10.20.2.115
	52:54:01:02:03:22		10.20.2.116

En cas de problèmes : 
1. Vérifier la connectivité ssh ainsi que le script restriction.sh si problèmes avec la connexion ssh :
      . vérifier les commande autorisées,
      . effectuer des tests.
      . si problèmes avec paramiko qui n'accepte pas votre clé, tester ces lignes :

      pkey = paramiko.RSAKey.from_private_key_file("/home/sae203/.ssh/nopass_key")
	with fabric.Connection(host = server, user = cfg["user"], connect_kwargs = {"pkey": pkey}) as cnx:
      Cela va forcer paramiko à utiliser votre clé présente dans le répertoire que vous allez spécifier.

2. Vérifier le fichier de configuration config.yaml -> le bon utilisateur, les bons serveurs dhcp et le bon chemin vers le fichier hosts.conf.
3. Vérifier l'intégralité de vos fonctions python, la syntaxe et vérifier qu'elles fonctionnent correctement.


